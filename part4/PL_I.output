Grammar

    0 $accept: pro $end

    1 pro: opr tel oen

    2 tel: dec imp

    3 dec: odc
    4    | dec odc

    5 odc: odi
    6    | odr

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT '(' lit ')' ';'
    8    | DCL ipe BIT '(' rzr ')' INIT '(' lib ')' ';'

    9 odr: DCL ipe BIN FIXED '(' rzr ')' ';'
   10    | DCL ipe BIT '(' rzr ')' ';'

   11 ipe: IDENT

   12 rzr: NUM

   13 lit: NUM

   14 shift: NUM

   15 mask: NUM

   16 lib: VAL

   17 opr: IDENT ':' PROC OPTIONS '(' MAIN ')' ';'

   18 oen: END IDENT ';'

   19 imp: opa
   20    | imp opa

   21 opa: ipe '=' avi ';'

   22 avi: lit
   23    | ipe
   24    | avi ZNK lit
   25    | avi ZNK ipe
   26    | SUBSTR '(' '(' ipe CONCAT ipe ')' shift mask ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 8 9 10 17 26
')' (41) 7 8 9 10 17 26
':' (58) 17
';' (59) 7 8 9 10 17 18 21
'=' (61) 21
error (256)
IDENT (258) 11 17 18
PROC (259) 17
OPTIONS (260) 17
MAIN (261) 17
END (262) 18
DCL (263) 7 8 9 10
BIN (264) 7 9
FIXED (265) 7 9
BIT (266) 8 10
NUM (267) 12 13 14 15
INIT (268) 7 8
VAL (269) 16
SUBSTR (270) 26
CONCAT (271) 26
ZNK (272) 24 25


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
pro (24)
    on left: 1, on right: 0
tel (25)
    on left: 2, on right: 1
dec (26)
    on left: 3 4, on right: 2 4
odc (27)
    on left: 5 6, on right: 3 4
odi (28)
    on left: 7 8, on right: 5
odr (29)
    on left: 9 10, on right: 6
ipe (30)
    on left: 11, on right: 7 8 9 10 21 23 25 26
rzr (31)
    on left: 12, on right: 7 8 9 10
lit (32)
    on left: 13, on right: 7 22 24
shift (33)
    on left: 14, on right: 26
mask (34)
    on left: 15, on right: 26
lib (35)
    on left: 16, on right: 8
opr (36)
    on left: 17, on right: 1
oen (37)
    on left: 18, on right: 1
imp (38)
    on left: 19 20, on right: 2 20
opa (39)
    on left: 21, on right: 19 20
avi (40)
    on left: 22 23 24 25 26, on right: 21 24 25


state 0

    0 $accept: . pro $end

    IDENT  shift, and go to state 1

    pro  go to state 2
    opr  go to state 3


state 1

   17 opr: IDENT . ':' PROC OPTIONS '(' MAIN ')' ';'

    ':'  shift, and go to state 4


state 2

    0 $accept: pro . $end

    $end  shift, and go to state 5


state 3

    1 pro: opr . tel oen

    DCL  shift, and go to state 6

    tel  go to state 7
    dec  go to state 8
    odc  go to state 9
    odi  go to state 10
    odr  go to state 11


state 4

   17 opr: IDENT ':' . PROC OPTIONS '(' MAIN ')' ';'

    PROC  shift, and go to state 12


state 5

    0 $accept: pro $end .

    $default  accept


state 6

    7 odi: DCL . ipe BIN FIXED '(' rzr ')' INIT '(' lit ')' ';'
    8    | DCL . ipe BIT '(' rzr ')' INIT '(' lib ')' ';'
    9 odr: DCL . ipe BIN FIXED '(' rzr ')' ';'
   10    | DCL . ipe BIT '(' rzr ')' ';'

    IDENT  shift, and go to state 13

    ipe  go to state 14


state 7

    1 pro: opr tel . oen

    END  shift, and go to state 15

    oen  go to state 16


state 8

    2 tel: dec . imp
    4 dec: dec . odc

    IDENT  shift, and go to state 13
    DCL    shift, and go to state 6

    odc  go to state 17
    odi  go to state 10
    odr  go to state 11
    ipe  go to state 18
    imp  go to state 19
    opa  go to state 20


state 9

    3 dec: odc .

    $default  reduce using rule 3 (dec)


state 10

    5 odc: odi .

    $default  reduce using rule 5 (odc)


state 11

    6 odc: odr .

    $default  reduce using rule 6 (odc)


state 12

   17 opr: IDENT ':' PROC . OPTIONS '(' MAIN ')' ';'

    OPTIONS  shift, and go to state 21


state 13

   11 ipe: IDENT .

    $default  reduce using rule 11 (ipe)


state 14

    7 odi: DCL ipe . BIN FIXED '(' rzr ')' INIT '(' lit ')' ';'
    8    | DCL ipe . BIT '(' rzr ')' INIT '(' lib ')' ';'
    9 odr: DCL ipe . BIN FIXED '(' rzr ')' ';'
   10    | DCL ipe . BIT '(' rzr ')' ';'

    BIN  shift, and go to state 22
    BIT  shift, and go to state 23


state 15

   18 oen: END . IDENT ';'

    IDENT  shift, and go to state 24


state 16

    1 pro: opr tel oen .

    $default  reduce using rule 1 (pro)


state 17

    4 dec: dec odc .

    $default  reduce using rule 4 (dec)


state 18

   21 opa: ipe . '=' avi ';'

    '='  shift, and go to state 25


state 19

    2 tel: dec imp .
   20 imp: imp . opa

    IDENT  shift, and go to state 13

    $default  reduce using rule 2 (tel)

    ipe  go to state 18
    opa  go to state 26


state 20

   19 imp: opa .

    $default  reduce using rule 19 (imp)


state 21

   17 opr: IDENT ':' PROC OPTIONS . '(' MAIN ')' ';'

    '('  shift, and go to state 27


state 22

    7 odi: DCL ipe BIN . FIXED '(' rzr ')' INIT '(' lit ')' ';'
    9 odr: DCL ipe BIN . FIXED '(' rzr ')' ';'

    FIXED  shift, and go to state 28


state 23

    8 odi: DCL ipe BIT . '(' rzr ')' INIT '(' lib ')' ';'
   10 odr: DCL ipe BIT . '(' rzr ')' ';'

    '('  shift, and go to state 29


state 24

   18 oen: END IDENT . ';'

    ';'  shift, and go to state 30


state 25

   21 opa: ipe '=' . avi ';'

    IDENT   shift, and go to state 13
    NUM     shift, and go to state 31
    SUBSTR  shift, and go to state 32

    ipe  go to state 33
    lit  go to state 34
    avi  go to state 35


state 26

   20 imp: imp opa .

    $default  reduce using rule 20 (imp)


state 27

   17 opr: IDENT ':' PROC OPTIONS '(' . MAIN ')' ';'

    MAIN  shift, and go to state 36


state 28

    7 odi: DCL ipe BIN FIXED . '(' rzr ')' INIT '(' lit ')' ';'
    9 odr: DCL ipe BIN FIXED . '(' rzr ')' ';'

    '('  shift, and go to state 37


state 29

    8 odi: DCL ipe BIT '(' . rzr ')' INIT '(' lib ')' ';'
   10 odr: DCL ipe BIT '(' . rzr ')' ';'

    NUM  shift, and go to state 38

    rzr  go to state 39


state 30

   18 oen: END IDENT ';' .

    $default  reduce using rule 18 (oen)


state 31

   13 lit: NUM .

    $default  reduce using rule 13 (lit)


state 32

   26 avi: SUBSTR . '(' '(' ipe CONCAT ipe ')' shift mask ')'

    '('  shift, and go to state 40


state 33

   23 avi: ipe .

    $default  reduce using rule 23 (avi)


state 34

   22 avi: lit .

    $default  reduce using rule 22 (avi)


state 35

   21 opa: ipe '=' avi . ';'
   24 avi: avi . ZNK lit
   25    | avi . ZNK ipe

    ZNK  shift, and go to state 41
    ';'  shift, and go to state 42


state 36

   17 opr: IDENT ':' PROC OPTIONS '(' MAIN . ')' ';'

    ')'  shift, and go to state 43


state 37

    7 odi: DCL ipe BIN FIXED '(' . rzr ')' INIT '(' lit ')' ';'
    9 odr: DCL ipe BIN FIXED '(' . rzr ')' ';'

    NUM  shift, and go to state 38

    rzr  go to state 44


state 38

   12 rzr: NUM .

    $default  reduce using rule 12 (rzr)


state 39

    8 odi: DCL ipe BIT '(' rzr . ')' INIT '(' lib ')' ';'
   10 odr: DCL ipe BIT '(' rzr . ')' ';'

    ')'  shift, and go to state 45


state 40

   26 avi: SUBSTR '(' . '(' ipe CONCAT ipe ')' shift mask ')'

    '('  shift, and go to state 46


state 41

   24 avi: avi ZNK . lit
   25    | avi ZNK . ipe

    IDENT  shift, and go to state 13
    NUM    shift, and go to state 31

    ipe  go to state 47
    lit  go to state 48


state 42

   21 opa: ipe '=' avi ';' .

    $default  reduce using rule 21 (opa)


state 43

   17 opr: IDENT ':' PROC OPTIONS '(' MAIN ')' . ';'

    ';'  shift, and go to state 49


state 44

    7 odi: DCL ipe BIN FIXED '(' rzr . ')' INIT '(' lit ')' ';'
    9 odr: DCL ipe BIN FIXED '(' rzr . ')' ';'

    ')'  shift, and go to state 50


state 45

    8 odi: DCL ipe BIT '(' rzr ')' . INIT '(' lib ')' ';'
   10 odr: DCL ipe BIT '(' rzr ')' . ';'

    INIT  shift, and go to state 51
    ';'   shift, and go to state 52


state 46

   26 avi: SUBSTR '(' '(' . ipe CONCAT ipe ')' shift mask ')'

    IDENT  shift, and go to state 13

    ipe  go to state 53


state 47

   25 avi: avi ZNK ipe .

    $default  reduce using rule 25 (avi)


state 48

   24 avi: avi ZNK lit .

    $default  reduce using rule 24 (avi)


state 49

   17 opr: IDENT ':' PROC OPTIONS '(' MAIN ')' ';' .

    $default  reduce using rule 17 (opr)


state 50

    7 odi: DCL ipe BIN FIXED '(' rzr ')' . INIT '(' lit ')' ';'
    9 odr: DCL ipe BIN FIXED '(' rzr ')' . ';'

    INIT  shift, and go to state 54
    ';'   shift, and go to state 55


state 51

    8 odi: DCL ipe BIT '(' rzr ')' INIT . '(' lib ')' ';'

    '('  shift, and go to state 56


state 52

   10 odr: DCL ipe BIT '(' rzr ')' ';' .

    $default  reduce using rule 10 (odr)


state 53

   26 avi: SUBSTR '(' '(' ipe . CONCAT ipe ')' shift mask ')'

    CONCAT  shift, and go to state 57


state 54

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT . '(' lit ')' ';'

    '('  shift, and go to state 58


state 55

    9 odr: DCL ipe BIN FIXED '(' rzr ')' ';' .

    $default  reduce using rule 9 (odr)


state 56

    8 odi: DCL ipe BIT '(' rzr ')' INIT '(' . lib ')' ';'

    VAL  shift, and go to state 59

    lib  go to state 60


state 57

   26 avi: SUBSTR '(' '(' ipe CONCAT . ipe ')' shift mask ')'

    IDENT  shift, and go to state 13

    ipe  go to state 61


state 58

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT '(' . lit ')' ';'

    NUM  shift, and go to state 31

    lit  go to state 62


state 59

   16 lib: VAL .

    $default  reduce using rule 16 (lib)


state 60

    8 odi: DCL ipe BIT '(' rzr ')' INIT '(' lib . ')' ';'

    ')'  shift, and go to state 63


state 61

   26 avi: SUBSTR '(' '(' ipe CONCAT ipe . ')' shift mask ')'

    ')'  shift, and go to state 64


state 62

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT '(' lit . ')' ';'

    ')'  shift, and go to state 65


state 63

    8 odi: DCL ipe BIT '(' rzr ')' INIT '(' lib ')' . ';'

    ';'  shift, and go to state 66


state 64

   26 avi: SUBSTR '(' '(' ipe CONCAT ipe ')' . shift mask ')'

    NUM  shift, and go to state 67

    shift  go to state 68


state 65

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT '(' lit ')' . ';'

    ';'  shift, and go to state 69


state 66

    8 odi: DCL ipe BIT '(' rzr ')' INIT '(' lib ')' ';' .

    $default  reduce using rule 8 (odi)


state 67

   14 shift: NUM .

    $default  reduce using rule 14 (shift)


state 68

   26 avi: SUBSTR '(' '(' ipe CONCAT ipe ')' shift . mask ')'

    NUM  shift, and go to state 70

    mask  go to state 71


state 69

    7 odi: DCL ipe BIN FIXED '(' rzr ')' INIT '(' lit ')' ';' .

    $default  reduce using rule 7 (odi)


state 70

   15 mask: NUM .

    $default  reduce using rule 15 (mask)


state 71

   26 avi: SUBSTR '(' '(' ipe CONCAT ipe ')' shift mask . ')'

    ')'  shift, and go to state 72


state 72

   26 avi: SUBSTR '(' '(' ipe CONCAT ipe ')' shift mask ')' .

    $default  reduce using rule 26 (avi)
